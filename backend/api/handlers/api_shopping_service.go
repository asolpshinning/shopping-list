/*
 * Shopping List Service for adding, editing and removing planned shopping items
 *
 * Shopping List Service
 *
 * API version: 0.1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package handlers

import (
	"context"
	"net/http"

	g "github.com/asolpshinning/shopping-list/backend/api/gen"
	"github.com/asolpshinning/shopping-list/backend/service"
)

// ShoppingAPIService is a service that implements the logic for the ShoppingAPIServicer
// This service should implement the business logic for every endpoint for the ShoppingAPI API.
// Include any external packages or services that will be required by this service.
type ShoppingAPIService struct {
	svc service.Manager
}

// NewShoppingAPIService creates a default api service
func NewShoppingAPIService(svc *service.Manager) g.ShoppingAPIServicer {
	return &ShoppingAPIService{svc: *svc}
}

// DeleteItem - Delete an existing item from the shopping list
func (s *ShoppingAPIService) DeleteItem(ctx context.Context, itemID float32) (g.ImplResponse, error) {
	err := s.svc.DeleteShoppingItem(ctx, int(itemID))
	if err != nil {
		return g.Response(http.StatusInternalServerError, g.Error{Message: err.Error()}), err
	}

	return g.Response(204, nil), nil
}

// GetItems - Get the items of the shopping list
func (s *ShoppingAPIService) GetItems(ctx context.Context) (g.ImplResponse, error) {
	items, err := s.svc.GetShoppingList(ctx)
	if err != nil {
		return g.Response(http.StatusInternalServerError, g.Error{Message: err.Error()}), err
	}

	return g.Response(http.StatusOK, items), nil
}

// PatchItem - Update an existing item in the shopping list
func (s *ShoppingAPIService) PatchItem(ctx context.Context, itemID float32, patchItemRequest g.PatchItemRequest) (g.ImplResponse, error) {
	itemToPatch := g.ShoppingItem{
		Id:          itemID,
		Name:        patchItemRequest.Name,
		Description: patchItemRequest.Description,
		Quantity:    patchItemRequest.Quantity,
	}
	err := s.svc.EditShoppingItem(ctx, itemToPatch)
	if err != nil {
		return g.Response(http.StatusInternalServerError, g.Error{Message: err.Error()}), err
	}
	return g.Response(http.StatusOK, g.PostItem200Response{Msg: "Item updated"}), nil
}

// PostItem - Post an item to the shopping list
func (s *ShoppingAPIService) PostItem(ctx context.Context, shoppingItem g.ShoppingItem) (g.ImplResponse, error) {
	err := s.svc.AddShoppingItem(ctx, shoppingItem)
	if err != nil {
		return g.Response(http.StatusInternalServerError, g.Error{Message: err.Error()}), err
	}
	return g.Response(http.StatusOK, g.PostItem200Response{Msg: "Item added"}), nil
}
