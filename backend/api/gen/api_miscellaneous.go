/*
 * Shopping List Service for adding, editing and removing planned shopping items
 *
 * Shopping List Service
 *
 * API version: 0.1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"net/http"
	"strings"
)

// MiscellaneousAPIController binds http requests to an api service and writes the service results to the http response
type MiscellaneousAPIController struct {
	service      MiscellaneousAPIServicer
	errorHandler ErrorHandler
}

// MiscellaneousAPIOption for how the controller is set up.
type MiscellaneousAPIOption func(*MiscellaneousAPIController)

// WithMiscellaneousAPIErrorHandler inject ErrorHandler into controller
func WithMiscellaneousAPIErrorHandler(h ErrorHandler) MiscellaneousAPIOption {
	return func(c *MiscellaneousAPIController) {
		c.errorHandler = h
	}
}

// NewMiscellaneousAPIController creates a default api controller
func NewMiscellaneousAPIController(s MiscellaneousAPIServicer, opts ...MiscellaneousAPIOption) Router {
	controller := &MiscellaneousAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the MiscellaneousAPIController
func (c *MiscellaneousAPIController) Routes() Routes {
	return Routes{
		{
			"GetHealth",
			strings.ToUpper("Get"),
			"/health",
			c.GetHealth,
		},
	}
}

// GetHealth - Check if the application is running
func (c *MiscellaneousAPIController) GetHealth(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetHealth(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
