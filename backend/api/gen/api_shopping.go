/*
 * Shopping List Service for adding, editing and removing planned shopping items
 *
 * Shopping List Service
 *
 * API version: 0.1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"errors"
	"io"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ShoppingAPIController binds http requests to an api service and writes the service results to the http response
type ShoppingAPIController struct {
	service      ShoppingAPIServicer
	errorHandler ErrorHandler
}

// ShoppingAPIOption for how the controller is set up.
type ShoppingAPIOption func(*ShoppingAPIController)

// WithShoppingAPIErrorHandler inject ErrorHandler into controller
func WithShoppingAPIErrorHandler(h ErrorHandler) ShoppingAPIOption {
	return func(c *ShoppingAPIController) {
		c.errorHandler = h
	}
}

// NewShoppingAPIController creates a default api controller
func NewShoppingAPIController(s ShoppingAPIServicer, opts ...ShoppingAPIOption) Router {
	controller := &ShoppingAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ShoppingAPIController
func (c *ShoppingAPIController) Routes() Routes {
	return Routes{
		{
			"DeleteItem",
			strings.ToUpper("Delete"),
			"/shopping/items/{itemID}",
			c.DeleteItem,
		},
		{
			"GetItems",
			strings.ToUpper("Get"),
			"/shopping/items",
			c.GetItems,
		},
		{
			"PatchItem",
			strings.ToUpper("Patch"),
			"/shopping/items/{itemID}",
			c.PatchItem,
		},
		{
			"PostItem",
			strings.ToUpper("Post"),
			"/shopping/items",
			c.PostItem,
		},
	}
}

// DeleteItem - Delete an existing item from the shopping list
func (c *ShoppingAPIController) DeleteItem(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	itemIDParam, err := parseFloat32Parameter(params["itemID"], true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.DeleteItem(r.Context(), itemIDParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetItems - Get the items of the shopping list
func (c *ShoppingAPIController) GetItems(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetItems(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PatchItem - Update an existing item in the shopping list
func (c *ShoppingAPIController) PatchItem(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	itemIDParam, err := parseFloat32Parameter(
		params["itemID"],
		true,
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	patchItemRequestParam := PatchItemRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&patchItemRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPatchItemRequestRequired(patchItemRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPatchItemRequestConstraints(patchItemRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PatchItem(r.Context(), itemIDParam, patchItemRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PostItem - Post an item to the shopping list
func (c *ShoppingAPIController) PostItem(w http.ResponseWriter, r *http.Request) {
	shoppingItemParam := ShoppingItem{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&shoppingItemParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertShoppingItemRequired(shoppingItemParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertShoppingItemConstraints(shoppingItemParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PostItem(r.Context(), shoppingItemParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
